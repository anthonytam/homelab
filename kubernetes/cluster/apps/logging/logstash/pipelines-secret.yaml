apiVersion: v1
kind: Secret
metadata:
  name: logstash-pipelines
  namespace: logging
stringData:
  pipelines.yml: |-
    - pipeline.id: inputs
      config.string: |
        input {
          udp {
            type => "pfsense-syslog"
            port => 5140
          }
        }
    - pipeline.id: tags
      config.string: |
        filter {
          if [type] == "pfsense-syslog" {
            mutate {
              add_tag => ["PFSense", "Ready"]
            }
          }
        }
    - pipeline.id: pfsense
      config.string: |
        filter {
          if "PFSense" in [tags] {
            grok {
              match => { "message" => "(<%{INT:log_entry}>)?%{SYSLOGTIMESTAMP:syslog_timestamp}( %{SYSLOGHOST:syslog_hostname})? %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
              add_field => [ "received_at", "%{@timestamp}" ]
              add_field => [ "received_from", "%{host}" ]
            }
            syslog_pri { }
            date {
              match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM  dd HH:mm:ss" ]
              locale => "en"
            }
            if !("_grokparsefailure" in [tags]) {
              mutate {
                replace => [ "@source_host", "%{syslog_hostname}" ]
                replace => [ "@message", "%{syslog_message}" ]
              }
            }
            mutate {
              remove_field => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
            }
            grok {
              add_tag => [ "firewall" ]
              match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]
            }
            mutate {
              gsub => ["datetime","  "," "]
            }
            date {
              match => [ "datetime", "MMM dd HH:mm:ss" ]
              timezone => "America/Toronto"
            }
            mutate {
              replace => [ "message", "%{msg}" ]
            }
            mutate {
              remove_field => [ "msg", "datetime" ]
            }
            if [prog] =~ /filterlog/ {
              mutate {
                remove_field => [ "msg", "datetime" ]
              }
              grok {
                patterns_dir => "/usr/share/logstash/data/patterns"
                match => [ "message", "%{PFSENSE_LOG_DATA}%{PFSENSE_IP_SPECIFIC_DATA}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}",
                   "message", "%{PFSENSE_LOG_DATA}%{PFSENSE_IPv4_SPECIFIC_DATA_ECN}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}" ]
                add_tag => [ "matched" ]
              }
              if "matched" in [tags] {
                mutate {
                  remove_field => [ "message" ]
                }
              }
              mutate {
                lowercase => [ "proto" ]
              }
              geoip {
                add_tag => [ "GeoIP" ]
                source => "src_ip"
              }
            }
          }
        }
    - pipeline.id: outputs
      config.string: |
        output {
          if [type] == "pfsense-syslog" {
            elasticsearch {
                hosts => [ "elasticsearch-es-http.logging.svc.cluster.local" ]
                user => "elastic"
                password => ""
                ssl => true
                #cacert => "/usr/share/logstash/config/ca.crt"
                ssl_certificate_verification => false
                index => "logstash-pfsense-%{+YYYY.MM.dd}"
            }
          }
        }
