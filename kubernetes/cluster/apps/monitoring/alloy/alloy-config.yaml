apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: monitoring
data:
  config.alloy: |
    // Loki Cluster
    loki.write "tamland_loki" {
      endpoint {
        url = "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
      }
    }
    // Prom Cluster
    prometheus.remote_write "tamland_prom" {
      endpoint {
        url = "http://prometheus-server.monitoring.svc.cluster.local:80/api/prom/push"
      }
    }

    // K8S Discovery
    discovery.kubernetes "log_pods" {
      role = "pod"
      namespaces {
        own_namespace = false
        names = ["3d-printing", "admin", "cert-manager", "games", "homerow", "media", "other-webapps", "secrets", "small-indie-bot", "smart-home"]
      }
      selectors {
        role = "pod"
        field = "spec.nodeName=" + coalesce(sys.env("HOSTNAME"), constants.hostname)
      }
    }
    discovery.kubernetes "metrics_pods" {
      role = "pod"
      namespaces {
        own_namespace = true
        names = ["3d-printing", "admin", "cert-manager", "games", "homerow", "media", "other-webapps", "secrets", "small-indie-bot", "smart-home"]
      }
      selectors {
        role = "pod"
        field = "spec.nodeName=" + coalesce(sys.env("HOSTNAME"), constants.hostname)
      }
    }
    discovery.kubernetes "metrics_svc" {
      role = "service"
      namespaces {
        own_namespace = true
        names = ["3d-printing", "admin", "cert-manager", "games", "homerow", "media", "other-webapps", "secrets", "small-indie-bot", "smart-home"]
      }
      selectors {
        role = "pod"
        field = "spec.nodeName=" + coalesce(sys.env("HOSTNAME"), constants.hostname)
      }
    }

    // Metrics handling to Prom
    prometheus.scrape "pod_metrics" {
      targets    = discovery.kubernetes.metrics_pods.targets
      forward_to = [prometheus.remote_write.tamland_prom.receiver]
    }
    prometheus.scrape "svc_metrics" {
      targets    = discovery.kubernetes.metrics_svc.targets
      forward_to = [prometheus.remote_write.tamland_prom.receiver]
    }

    // Log handling to Loki
    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.log_pods.targets

      // Label creation - "namespace" field from "__meta_kubernetes_namespace"
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }

      // Label creation - "pod" field from "__meta_kubernetes_pod_name"
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }

      // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }

      // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        action = "replace"
        target_label = "app"
      }

      // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
      // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "job"
        separator = "/"
        replacement = "$1"
      }

      // Label creation - "__path__" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
      // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "__path__"
        separator = "/"
        replacement = "/var/log/pods/*$1/*.log"
      }

      // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
      rule {
        source_labels = ["__meta_kubernetes_pod_container_id"]
        action = "replace"
        target_label = "container_runtime"
        regex = "^(\\S+):\\/\\/.+$"
        replacement = "$1"
      }
    }

    loki.source.kubernetes "pod_logs" {
      targets    = discovery.relabel.pod_logs.output
      forward_to = [loki.write.tamland_loki.receiver]
    }